// Sphere texture mapping : 
// https://www.shadertoy.com/view/MssGRl
// [Davidar] https://www.shadertoy.com/view/MdGBWG

// EARTH
// 1-bit land/ocean map, 2.5 degree resolution
// auto-generated by https://github.com/rkibria/img2shadertoy
const ivec2 size = ivec2(160, 72);
const int[] rle = int[] ( 0x1ff91, 0x03ff9100, 0xf8000000, 0x8ff8f, 0xfffc0000, 0xf80fffff, 0x10aff89, 0xfe000000, 0x39ffffff, 0xff88fc3c, 0x0000030a, 0xffffc000, 0xc0003fff, 0x0100ff88, 0x80050084, 0xffbf, 0xff87fe, 0x7008607, 0x20000078, 0xf7ffffff, 0xf00ff83, 0x20000086, 0x20060083, 0xffff8fff, 0x873fff, 0x844000, 0x7004, 0x89f437, 0xcd0100, 0x921800, 0x920c00, 0x921c00, 0x8a1c00, 0x00860800, 0x008a3800, 0x00861000, 0x00897800, 0x00870400, 0x0089f800, 0x86400201, 0x01f80100, 0x0f000088, 0xf80b0087, 0x80000003, 0x00000007, 0x871fc3c0, 0x07f80b00, 0x0f800000, 0xc0000000, 0x871fff, 0xff80b, 0x1f8000, 0xffc00000, 0xb00871f, 0x1ff0, 0x1fc0, 0x1fffe000, 0xf00b0087, 0xc000003f, 0x0000063f, 0x870fffe0, 0xfff00b00, 0x3fe00000, 0xc0000004, 0x00870fff, 0x00fff00b, 0x0c3fe000, 0xfe000000, 0x0b008703, 0x0000fffc, 0x000cffe0, 0x027c0000, 0xfe0a0087, 0xe00000ff, 0x000008ff, 0x00883000, 0x01fffe05, 0x8dffe000, 0xffff0500, 0xffe00003, 0xff0b008d, 0xe00003ff, 0xff, 0x87060004, 0xffff0b00, 0xfff00000, 0x02000000, 0x008703c1, 0x0007ff0a, 0x01fff000, 0x31710000, 0xff090088, 0xf000000f, 0x800003ff, 0x09008971, 0x000007fe, 0x0007fff0, 0x00896140, 0x0001fe09, 0x0ffffdf0, 0x88410100, 0xfec00b00, 0xfff80000, 0x80000fff, 0x00870600, 0x0008200a, 0xfffffc00, 0x200c009, 0x700b0088, 0xfe000000, 0xc007ffff, 0x87010f80, 0x001e0b00, 0xfffc0000, 0x80e01eff, 0x00860107, 0x081bc00b, 0xfffc0000, 0xc3e07e7f, 0x0b008703, 0x000101c0, 0x7ffffe00, 0x07e7f0ff, 0xe00c0087, 0x00000001, 0x7fbffffc, 0x017ff7f8, 0xf00b0086, 0x00000081, 0x8ffffffc, 0x87ffffff, 0x83fc0c00, 0xf0000000, 0xfff7ffff, 0x8601ffff, 0x7ffa0700, 0xf0000000, 0xff83e77f, 0xfe070087, 0x000001ff, 0x83c00fe0, 0x853000ff, 0xff800800, 0x000003ff, 0x83c00f00, 0x85c800ff, 0xffc00e00, 0x000003ff, 0xcffb00f0, 0x043fffff, 0x0d008401, 0x07ffffc0, 0x61f00000, 0xffffcf67, 0x00850fff, 0xffffc00e, 0x8000000f, 0xfff707d7, 0x023fffff, 0xc00d0084, 0x003fffff, 0xafff8000, 0xffffffc3, 0x0900857f, 0x3fffffc0, 0xff800002, 0xff83e7ff, 0xe0070085, 0x03ffffff, 0x85fec000, 0x840100ff, 0xfff00700, 0x0001ff7f, 0xff85f890, 0x83c000, 0xfff80108, 0x7e1f, 0xff842840, 0x1c07f0f, 0x7000000, 0x6e03fffe, 0x7c000000, 0x0eff84fc, 0x00000101, 0xffffffc0, 0x00700603, 0x84ee7c00, 0x1f7f0eff, 0xff800000, 0x384fffff, 0xf00380f8, 0x0cff85fe, 0x8700007f, 0x7fffffff, 0x0003f878, 0x0eff87e0, 0xffc00000, 0x1e5c7bff, 0x80003ff8, 0x84df007f, 0x0d0084ff, 0xfc07f63e, 0x0000007f, 0xfffff820, 0x00841fef, 0xfd03c00c, 0x00fffc01, 0x00400000, 0x00875ffe, 0xf0e91204, 0x0083ffff, 0x1fa00302, 0x80060087, 0xfffff3f8, 0x83f000, 0x880300, 0xfffff004, 0xc603ff );
const int rlb = rle.length() << 2;

#define RLE(id) rle[id>>2]>>((id & 0x03)<<3)

void mainImage( out vec4 fragColor, in vec2 uv ) {
    if (uv.y<float(size.y) && uv.x<float(size.x)) {
        bool seq;
        int id = int(uv.y) * (size.x>>3) + (int(uv.x)>>3);
        int k = 0, ri = 0, crb, n, cbi = 0;
    	while (ri < rlb){
            crb = RLE(ri);
            n = 1 + crb & 0x7f;
            seq = (crb & 0x80) == 0;
            if (id >= cbi && id < cbi + n ) {  
                k = RLE( ri + 1 + (seq ? id-cbi : 0));
                break;
            }
            ri += seq ? n + 1 : 2;
            cbi += n; 
        }
		fragColor = (k>>(int(uv.x)&0x07)&1) > 0 ? vec4(.3,.5,.2,1) : vec4(.6,.7,.9,1);
    } else {
        fragColor = vec4(.6,.7,.9,1);
    }
}